import picos as pic
'''
p_v = [ 0.140, 0.360, 0.360, 0.140, 0.198, 0.302, 0.302, 0.198, 
	0.189, 0.311, 0.311, 0.189, 0.460, 0.040, 0.040, 0.460 ]



##################




'''
'''
bell1 = 
	abs(((p[1] + p[4]) - (p[2] + p[3])) + ((p[5] + p[8]) - (p[6] + p[7])) + ((p[9] + p[12]) - (p[10] + p[11])) - ((p[13] + p[16]) - (p[14] + p[15])) ) <= ( 2 * ( 1 + (0.5 * ( abs( ((2 * (p[1] + p[2]))  - 1)  - (((2 * (p[5] + p[6]))  - 1)) ) + abs( ((2 * (p[9] + p[10])) - 1) - (((2 * (p[13] + p[14])) - 1)) ) + abs( ((2 * (p[1] + p[3]))  - 1)  - (((2 * (p[5] + p[7]))  - 1)) ) + abs( ((2 * (p[9] + p[11])) - 1) - (((2 * (p[13] + p[15])) - 1)) ))) ) )

bell2 = 
	abs(((p[1] + p[4]) - (p[2] + p[3])) + ((p[5] + p[8]) - (p[6] + p[7])) - ((p[9] + p[12]) - (p[10] + p[11])) + ((p[13] + p[16]) - (p[14] + p[15])) ) <= ( 2 * ( 1 + (0.5 * ( abs( ((2 * (p[1] + p[2]))  - 1)  - (((2 * (p[5] + p[6]))  - 1)) ) + abs( ((2 * (p[9] + p[10])) - 1) - (((2 * (p[13] + p[14])) - 1)) ) + abs( ((2 * (p[1] + p[3]))  - 1)  - (((2 * (p[5] + p[7]))  - 1)) ) + abs( ((2 * (p[9] + p[11])) - 1) - (((2 * (p[13] + p[15])) - 1)) ))) ) )

bell3 = 
	abs(((p[1] + p[4]) - (p[2] + p[3])) - ((p[5] + p[8]) - (p[6] + p[7])) + ((p[9] + p[12]) - (p[10] + p[11])) - ((p[13] + p[16]) - (p[14] + p[15])) ) <= ( 2 * ( 1 + (0.5 * ( abs( ((2 * (p[1] + p[2]))  - 1)  - (((2 * (p[5] + p[6]))  - 1)) ) + abs( ((2 * (p[9] + p[10])) - 1) - (((2 * (p[13] + p[14])) - 1)) ) + abs( ((2 * (p[1] + p[3]))  - 1)  - (((2 * (p[5] + p[7]))  - 1)) ) + abs( ((2 * (p[9] + p[11])) - 1) - (((2 * (p[13] + p[15])) - 1)) ))) ) )

bell4 = 
	abs( 0 - ((p[1] + p[4]) - (p[2] + p[3])) + ((p[5] + p[8]) - (p[6] + p[7])) + ((p[9] + p[12]) - (p[10] + p[11])) + ((p[13] + p[16]) - (p[14] + p[15])) ) <= ( 2 * ( 1 + (0.5 * ( abs( ((2 * (p[1] + p[2]))  - 1)  - (((2 * (p[5] + p[6]))  - 1)) ) + abs( ((2 * (p[9] + p[10])) - 1) - (((2 * (p[13] + p[14])) - 1)) ) + abs( ((2 * (p[1] + p[3]))  - 1)  - (((2 * (p[5] + p[7]))  - 1)) ) + abs( ((2 * (p[9] + p[11])) - 1) - (((2 * (p[13] + p[15])) - 1)) ))) ) )
'''
##################

QLP  = pic.Problem()


p = [ QLP.add_variable('p['+str(i)+']',1) for i in range(17) ]
'''
A11 = (2 * (p[1] + p[2])) - 1
A12 = (2 * (p[5] + p[6])) - 1
A21 = (2 * (p[9] + p[10])) - 1
A22 = (2 * (p[13] + p[14])) - 1
B11 = (2 * (p[1] + p[3])) - 1
B12 = (2 * (p[9] + p[11])) - 1
B21 = (2 * (p[5] + p[7])) - 1
B22 = (2 * (p[13] + p[15])) - 1
A11B11 = (p[1] + p[4]) - (p[2] + p[3])
A12B12 = (p[5] + p[8]) - (p[6] + p[7])
A21B21 = (p[9] + p[12]) - (p[10] + p[11])
A22B22 = (p[13] + p[16]) - (p[14] + p[15])

delta = 0.5 * (abs(A11 - A12) + abs(A21 - A22) + abs(B11 - B21) + abs(B12 - B22)) 


bell_rh = ( 2 * ( 1 + delta ) )

bell_1_lh = abs(     A11B11 + A12B12 + A21B21 - A22B22 )
QLP.add_constraint( 1| bell_1_lh <= bell_rh )

bell_2_lh = abs(     A11B11 + A12B12 - A21B21 + A22B22 )
QLP.add_constraint( 1| bell_2_lh <= bell_rh )

bell_3_lh = abs(     A11B11 - A12B12 + A21B21 + A22B22 )
QLP.add_constraint( 1| bell_3_lh <= bell_rh )

bell_4_lh = abs( 0 - A11B11 + A12B12 + A21B21 + A22B22 )
QLP.add_constraint( 1| bell_4_lh <= bell_rh )

'''
'''
for i in range(17):
	QLP.add_constraint( 1| p[i] >= 0 )
	QLP.add_constraint( 1| p[i] <= 1 )

QLP.add_constraint( 1| (p[1]+p[2]) == (p[5]+p[6]) )
QLP.add_constraint( 1| (p[9]+p[10]) == (p[13]+p[14]) )
QLP.add_constraint( 1| (p[1]+p[3]) == (p[9]+p[11]) )
QLP.add_constraint( 1| (p[5]+p[7]) == (p[13]+p[15]) )

A11 = (2 * (p[1] + p[2])) - 1
A12 = (2 * (p[5] + p[6])) - 1
A21 = (2 * (p[9] + p[10])) - 1
A22 = (2 * (p[13] + p[14])) - 1
B11 = (2 * (p[1] + p[3])) - 1
B12 = (2 * (p[9] + p[11])) - 1
B21 = (2 * (p[5] + p[7])) - 1
B22 = (2 * (p[13] + p[15])) - 1

A11B11 = (p[1] + p[4]) - (p[2] + p[3])
A12B12 = (p[5] + p[8]) - (p[6] + p[7])
A21B21 = (p[9] + p[12]) - (p[10] + p[11])
A22B22 = (p[13] + p[16]) - (p[14] + p[15])

QLP.add_constraint( 1| (A11 - A12) >= 0 )
QLP.add_constraint( 1| (A21 - A22) >= 0 )
QLP.add_constraint( 1| (B11 - B21) >= 0 )
QLP.add_constraint( 1| (B12 - B22) >= 0 )
QLP.add_constraint( 1| (A11B11 + A12B12 + A21B21 - A22B22) >= 0 )


delta = 0.5 * ((A11 - A12) + (A21 - A22) + (B11 - B21) + (B12 - B22)) 

QLP.add_constraint( 1| delta > 0 )

QLP.add_constraint( 1| delta < 1 )

QLP.add_constraint( 1| (A11B11 + A12B12 + A21B21 - A22B22) > ( 2 * ( 1 + delta ) ) )


QLP.solve(verbose=0)
print QLP

for i in range(17):
	print p[i]
'''
p =  [ 0.699329657283,
	0.299663819777,
	0.369148987005,
	0.679682978566,
	0.655190284353,
	0.343803192707,
	0.280746580755,
	0.679682978566,
	0.700035557225,
	0.300868961154,
	0.368443087063,
	0.679682978566,
	0.301773481377,
	0.699131037002,
	0.634163383731,
	0.320317021434 ]

print(p[1]+p[2])
print(p[5]+p[6])